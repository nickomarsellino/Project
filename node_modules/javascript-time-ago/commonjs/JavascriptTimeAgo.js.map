{"version":3,"sources":["../source/JavascriptTimeAgo.js"],"names":["JavascriptTimeAgo","locales","locale","concat","default_locale","input","style","get_date_and_time_being_formatted","date","time","get_locale_data","flavour","locale_data","now","Date","elapsed","custom","undefined","units","get_time_interval_measurement_units","length","console","error","join","step","Math","abs","gradation","format","unit","factor","granularity","amount","round","sign","_","setDefaultLocale","Error","constructor","getTime","restricted_set_of_units","Object","keys","filter","indexOf"],"mappings":"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","file":"JavascriptTimeAgo.js","sourcesContent":["import grade from './grade'\r\nimport choose_locale from './locale'\r\nimport { twitterStyle, timeStyle, defaultStyle } from './style'\r\nimport RelativeTimeFormat from './RelativeTimeFormat'\r\n\r\nexport default class JavascriptTimeAgo\r\n{\r\n\t// Fallback locale\r\n\t// (when not a single supplied preferred locale is available)\r\n\tstatic default_locale = 'en'\r\n\r\n\t// For all configured locales\r\n\t// their relative time formatter messages will be stored here\r\n\tstatic locales = {}\r\n\r\n\t/**\r\n\t * @param {(string|string[])} locales=[] - Preferred locales (or locale).\r\n\t */\r\n\tconstructor(locales = [])\r\n\t{\r\n\t\t// Convert `locales` to an array.\r\n\t\tif (typeof locales === 'string')\r\n\t\t{\r\n\t\t\tlocales = [locales]\r\n\t\t}\r\n\r\n\t\t// Choose the most appropriate locale\r\n\t\t// (one of the previously added ones)\r\n\t\t// based on the list of preferred `locales` supplied by the user.\r\n\t\tthis.locale = choose_locale\r\n\t\t(\r\n\t\t\tlocales.concat(JavascriptTimeAgo.default_locale),\r\n\t\t\tJavascriptTimeAgo.locales\r\n\t\t)\r\n\t}\r\n\r\n\t// Formats the relative date/time.\r\n\t//\r\n\t// @return {string} Returns the formatted relative date/time.\r\n\t//\r\n\t// @param {(Object|string)} [style] - Relative date/time formatting style.\r\n\t//\r\n\t// @param {string[]} [style.units] - A list of allowed time units\r\n\t//                                  (e.g. ['second', 'minute', 'hour', …])\r\n\t//\r\n\t// @param {Function} [style.custom] - `function ({ elapsed, time, date, now })`.\r\n\t//                                    If this function returns a value, then\r\n\t//                                    the `.format()` call will return that value.\r\n\t//                                    Otherwise it has no effect.\r\n\t//\r\n\t// @param {string} [style.flavour] - e.g. \"long\", \"short\", \"tiny\", etc.\r\n\t//\r\n\t// @param {Object[]} [style.gradation] - Time scale gradation steps.\r\n\t//\r\n\t// @param {string} style.gradation[].unit - Time interval measurement unit.\r\n\t//                                          (e.g. ['second', 'minute', 'hour', …])\r\n\t//\r\n\t// @param {Number} style.gradation[].factor - Time interval measurement unit factor.\r\n\t//                                            (e.g. `60` for 'minute')\r\n\t//\r\n\t// @param {Number} [style.gradation[].granularity] - A step for the unit's \"amount\" value.\r\n\t//                                                   (e.g. `5` for '0 minutes', '5 minutes', etc)\r\n\t//\r\n\t// @param {Number} [style.gradation[].threshold] - Time interval measurement unit threshold.\r\n\t//                                                 (e.g. `45` seconds for 'minute').\r\n\t//                                                 There can also be specific `threshold_[unit]`\r\n\t//                                                 thresholds for fine-tuning.\r\n\t//\r\n\tformat(input, style = defaultStyle)\r\n\t{\r\n\t\tif (typeof style === 'string')\r\n\t\t{\r\n\t\t\tswitch (style)\r\n\t\t\t{\r\n\t\t\t\tcase 'twitter':\r\n\t\t\t\t\tstyle = twitterStyle\r\n\t\t\t\t\tbreak\r\n\t\t\t\tcase 'time':\r\n\t\t\t\t\tstyle = timeStyle\r\n\t\t\t\t\tbreak\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tstyle = defaultStyle\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst { date, time } = get_date_and_time_being_formatted(input)\r\n\r\n\t\t// Get locale messages for this formatting flavour\r\n\t\tconst { flavour, locale_data } = this.get_locale_data(style.flavour)\r\n\r\n\t\t// Can pass a custom `now`, e.g. for testing purposes.\r\n\t\t// Technically it doesn't belong to `style`\r\n\t\t// but since this is an undocumented internal feature,\r\n\t\t// taking it from the `style` argument will do (for now).\r\n\t\tconst now = style.now || Date.now()\r\n\r\n\t\t// how much time elapsed (in seconds)\r\n\t\tconst elapsed = (now - time) / 1000 // in seconds\r\n\r\n\t\t// `custom` – A function of `{ elapsed, time, date, now, locale }`.\r\n\t\t// If this function returns a value, then the `.format()` call will return that value.\r\n\t\t// Otherwise the relative date/time is formatted as usual.\r\n\t\t// This feature is currently not used anywhere and is here\r\n\t\t// just for providing the ultimate customization point\r\n\t\t// in case anyone would ever need that. Prefer using\r\n\t\t// `gradation[step].format(value, locale)` instead.\r\n\t\t//\r\n\t\t// I guess `custom` is deprecated and will be removed\r\n\t\t// in some future major version release.\r\n\t\t//\r\n\t\tif (style.custom)\r\n\t\t{\r\n\t\t\tconst custom = style.custom\r\n\t\t\t({\r\n\t\t\t\tnow,\r\n\t\t\t\tdate,\r\n\t\t\t\ttime,\r\n\t\t\t\telapsed,\r\n\t\t\t\tlocale : this.locale\r\n\t\t\t})\r\n\r\n\t\t\tif (custom !== undefined)\r\n\t\t\t{\r\n\t\t\t\treturn custom\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Available time interval measurement units.\r\n\t\tconst units = get_time_interval_measurement_units(locale_data, style.units)\r\n\r\n\t\t// If no available time unit is suitable, just output an empty string.\r\n\t\tif (units.length === 0)\r\n\t\t{\r\n\t\t\tconsole.error(`Units \"${units.join(', ')}\" were not found in locale data for \"${this.locale}\".`)\r\n\t\t\treturn ''\r\n\t\t}\r\n\r\n\t\t// Choose the appropriate time measurement unit\r\n\t\t// and get the corresponding rounded time amount.\r\n\t\tconst step = grade\r\n\t\t(\r\n\t\t\tMath.abs(elapsed),\r\n\t\t\tnow,\r\n\t\t\tunits,\r\n\t\t\tstyle.gradation\r\n\t\t)\r\n\r\n\t\t// If no time unit is suitable, just output an empty string.\r\n\t\t// E.g. when \"now\" unit is not available\r\n\t\t// and \"second\" has a threshold of `0.5`\r\n\t\t// (e.g. the \"canonical\" grading scale).\r\n\t\tif (!step)\r\n\t\t{\r\n\t\t\treturn ''\r\n\t\t}\r\n\r\n\t\tif (step.format)\r\n\t\t{\r\n\t\t\treturn step.format(date || time, this.locale)\r\n\t\t}\r\n\r\n\t\tconst { unit, factor, granularity } = step\r\n\r\n\t\tlet amount = Math.abs(elapsed) / factor\r\n\r\n\t\t// Apply granularity to the time amount\r\n\t\t// (and fallback to the previous step\r\n\t\t//  if the first level of granularity\r\n\t\t//  isn't met by this amount)\r\n\t\tif (granularity)\r\n\t\t{\r\n\t\t\t// Recalculate the elapsed time amount based on granularity\r\n\t\t\tamount = Math.round(amount / granularity) * granularity\r\n\t\t}\r\n\r\n\t\t// Format the time elapsed.\r\n\t\t// Using `Intl.RelativeTimeFormat` proposal polyfill.\r\n\t\t//\r\n\t\t// TODO: Should cache `Intl.RelativeTimeFormat` instances\r\n\t\t// for given `this.locale` and `flavour`.\r\n\t\t//\r\n\t\t// ```js\r\n\t\t// import Cache from './cache'\r\n\t\t// const cache = new Cache()\r\n\t\t// const formatter = this.cache.get(this.locale, flavour) ||\r\n\t\t//   this.cache.put(this.locale, flavour, new Intl.RelativeTimeFormat(...))\r\n\t\t// return formatter.format(...)\r\n\t\t// ```\r\n\t\t//\r\n\t\treturn new RelativeTimeFormat(this.locale, { style: flavour }).format\r\n\t\t(\r\n\t\t\t-1 * Math.sign(elapsed) * Math.round(amount),\r\n\t\t\tunit\r\n\t\t)\r\n\t}\r\n\r\n\t/**\r\n\t * Gets locale messages for this formatting flavour\r\n\t *\r\n\t * @param {(string|string[])} flavour - Relative date/time formatting flavour.\r\n\t *                                      If it's an array then all flavours are tried in order.\r\n\t *\r\n\t * @returns {Object} Returns an object of shape { flavour, locale_data }\r\n\t */\r\n\tget_locale_data(flavour = [])\r\n\t{\r\n\t\t// Get relative time formatting rules for this locale\r\n\t\tconst locale_data = JavascriptTimeAgo.locales[this.locale]\r\n\r\n\t\t// Convert `flavour` to an array.\r\n\t\tif (typeof flavour === 'string')\r\n\t\t{\r\n\t\t\tflavour = [flavour]\r\n\t\t}\r\n\r\n\t\t// \"long\" flavour is the default one.\r\n\t\t// (it's always present)\r\n\t\tflavour = flavour.concat('long')\r\n\r\n\t\t// Find a suitable flavour.\r\n\t\tfor (const _ of flavour)\r\n\t\t{\r\n\t\t\tif (locale_data[_])\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tflavour     : _,\r\n\t\t\t\t\tlocale_data : locale_data[_]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Can't happen - \"long\" flavour is always present.\r\n\t\t// throw new Error(`None of the flavours - ${flavour.join(', ')} - was found for locale \"${this.locale}\".`)\r\n\t}\r\n}\r\n\r\n/**\r\n * Sets default locale.\r\n * @param  {string} locale\r\n */\r\nJavascriptTimeAgo.setDefaultLocale = function(locale)\r\n{\r\n\tJavascriptTimeAgo.default_locale = locale\r\n}\r\n\r\n/**\r\n * Adds locale data for a specific locale.\r\n * @param {Object} locale_data\r\n */\r\nJavascriptTimeAgo.locale = function(locale_data)\r\n{\r\n\tif (!locale_data)\r\n\t{\r\n\t\tthrow new Error('[javascript-time-ago] Invalid locale data passed.')\r\n\t}\r\n\t// This locale data is stored in a global variable\r\n\t// and later used when calling `.format(time)`.\r\n\tJavascriptTimeAgo.locales[locale_data.locale] = locale_data\r\n}\r\n\r\n// Normalizes `.format()` `time` argument.\r\nfunction get_date_and_time_being_formatted(input)\r\n{\r\n\tif (input.constructor === Date)\r\n\t{\r\n\t\treturn {\r\n\t\t\tdate : input,\r\n\t\t\ttime : input.getTime()\r\n\t\t}\r\n\t}\r\n\r\n\tif (typeof input === 'number')\r\n\t{\r\n\t\treturn {\r\n\t\t\ttime : input,\r\n\t\t\t// `date` is not required for formatting\r\n\t\t\t// relative times unless \"twitter\" preset is used.\r\n\t\t\t// date : new Date(input)\r\n\t\t}\r\n\t}\r\n\r\n\t// For some weird reason istanbul doesn't see this `throw` covered.\r\n\t/* istanbul ignore next */\r\n\tthrow new Error(`Unsupported relative time formatter input: ${typeof input}, ${input}`)\r\n}\r\n\r\n// Get available time interval measurement units.\r\nfunction get_time_interval_measurement_units(locale_data, restricted_set_of_units)\r\n{\r\n\t// All available time interval measurement units.\r\n\tconst units = Object.keys(locale_data)\r\n\r\n\t// If only a specific set of available\r\n\t// time measurement units can be used.\r\n\tif (restricted_set_of_units)\r\n\t{\r\n\t\t// Reduce available time interval measurement units\r\n\t\t// based on user's preferences.\r\n\t\treturn restricted_set_of_units.filter(_ => units.indexOf(_) >= 0)\r\n\t}\r\n\r\n\treturn units\r\n}"]}